/*************************************************************************************************\
* Наименование: Базовый объект формирования запросов и JSON произвольной структуры                *
* Контур/Модуль: Абстрактный конструктор JSON                                                     *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

#ifnDef _JRN_TRACKING_BASE_INCLUDED_
#define _JRN_TRACKING_BASE_INCLUDED_
#component "C_JRN_TRACKING"

ObjInterface oJRN_TRACKING_BASE;
public:
#doc
#end


#doc
Записать в длинную строку лог.
Получить путь на лог-файл можно GetLogFile
#end
Procedure MyLog(_str: string);

#doc
Выгружает на диск длинную строку с логом и очищает строку.
Возвращается путь на выгруженный файл
#end
function GetLogFile : string;

#doc
Создать новый файл логов
#end
Function GenerateNewFile: string;


#doc
добавить строку в запрос с логированием
#end
Procedure MysqlAddStr(var query_handle: tptr; add_query_str: string);

#doc
Выбор таблицы
#end
function GetTable : word;

#doc
Просмотр и редактирование последних NREC журнала по офисам
#end
Procedure Show_LastNrecs;

#doc
Проверить корректность условия публикации
проверяется корректность запроса и наличие подписчиков

Параметры:
_fcJRN_TERM - comp; ссылка на eckjdbt JRN_Publication_term
_cRec       - comp; NREC записи по которой проверяется условие публикации
_returnNrec - comp; возвращаемый. nrec , который будет подставлен в условие WHERE при генерации тела сообщения
_err        - string; возвращаемый. текст ошибки
result = true  - условие корректно
result = false - условие некорректно
#end

function CheckQueryTerm(_fcJRN_TERM, _cRec: comp; var _returnNrec : comp; var _err : string): boolean;

#doc
Обработать группу записей журнала по всем офисам
 вызывает processJRNFromLastNREC по каждому офису
#end
Procedure processJRNAllOffice(_topCnt : longint = 10000);

#doc
Обработать группу записей журнала по офису начиная с последнего обработанного NREC
обрабатывать будем по 10000
_office : word - номер офиса
_lastNrecJRN comp - nrec журнала, с которого начинать обработку
#end
Procedure processJRNFromLastNREC( _office: word; _lastNrecJRN : comp; _topCnt : longint = 10000);

#doc
Очистить кэш подготовленных запросов
#end
procedure FreeqryIDs;

#doc
получить хеш строки
_widestr  - widestring[2097151], входная строка
p , m - longint, параметры хеширования

не рекомендуется использовать ее прикладному программисту.
Данная функция используется в GetHash1 и GetHash2
каждая из них даешь хеш с вероятностью повторения 10^-9
если же запишем хеш в два разных поля и будем потом по ним сравнивать, то общая вероятность = повторения 10^-18
#end
Function GetHash(_widestr : widestring[2097151]; p , m : longint) : comp;

#doc
получить хеш строки №1
_widestr  - widestring[2097151], входная строка
запускает GetHash с параметрами p = 31, m = 1000000007
хеш с вероятностью повторения 10^-9
#end
Function GetHash1(_widestr : widestring[2097151] ) : comp;

#doc
получить хеш строки №2
_widestr  - widestring[2097151], входная строка
запускает GetHash с параметрами p = 37, m = 1000000009
хеш с вероятностью повторения 10^-9
#end
Function GetHash2(_widestr : widestring[2097151] ) : comp;

#doc
Отключить логирование
#end
procedure disableLog;

#doc
Включить логирование
#end
procedure enableLog;

#doc
Включить TestMode - проверки на пустые ссылки на объекты отключены (используется для проверки в конструкторе условий публикации)
#end
procedure SetTestModeOn;

#doc
Выключить TestMode
#end
procedure SetTestModeOff;

end;

VipInterface JRN_TRACKING_BASE Implements oJRN_TRACKING_BASE #Licensed_Free;

#end
